/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */
 plugins {
    id 'java'
}

dependencies {
    testImplementation "junit:junit:4.13.2"
    implementation project(":nostr4j")
    implementation "org.ngengine:nge-platform-common:${project.version.endsWith('-SNAPSHOT') ? rootProject.ext.ngePlatformVersionSnapshot : rootProject.ext.ngePlatformVersion}"
    implementation "org.ngengine:nge-platform-jvm:${project.version.endsWith('-SNAPSHOT') ? rootProject.ext.ngePlatformVersionSnapshot : rootProject.ext.ngePlatformVersion}"   

}

 

tasks.named('test') {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

 

task runBenchmarks(type: JavaExec) {    
    group = 'application'
    description = 'Runs the benchmarks app with production optimizations'
    mainClass = 'org.ngengine.nostr4j.Benchmarks'
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = [  '-XX:+UseG1GC']
    dependsOn build 
}

 task traceBenchmarks(type: JavaExec) {
    group = 'application'
    description = 'Runs the benchmarks app with the GraalVM native-image tracing agent'
    mainClass = 'org.ngengine.nostr4j.Benchmarks'
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = [
        '-XX:+UseG1GC',
        '-agentlib:native-image-agent=config-output-dir=' + projectDir + '/src/test/resources/META-INF/native-image/org/ngengine/nostr4j',
    ]
    dependsOn build
}

task buildBenchmarksNative(type: Exec) {
    group = 'build'
    description = 'Builds a native image of the Benchmarks app using GraalVM'
    def graalHome = System.getenv("GRAALVM_HOME")
    if (graalHome == null) {
        graalHome = System.getenv("JAVA_HOME")
        if (graalHome == null) {
            System.err.println("GRAALVM_HOME or JAVA_HOME environment variable must be set")
            // throw new Exception("GRAALVM_HOME or JAVA_HOME environment variable must be set")
        }
    }

    def nativeImageExecutable = "${graalHome}/bin/native-image"
    def outputDir = "${buildDir}/native-image"
    def mainClass = 'org.ngengine.nostr4j.Benchmarks'

    def combinedClasspath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath

    commandLine nativeImageExecutable,
        '-cp', combinedClasspath.asPath,
        '-H:Name=benchmarks', 
        '-H:Path=' + outputDir, 
        "-H:ReflectionConfigurationFiles=${projectDir}/reflect-config.json",
        '-H:+UnlockExperimentalVMOptions',
        '--enable-native-access=ALL-UNNAMED',
        '--link-at-build-time',     
        mainClass
    dependsOn build
    outputs.upToDateWhen { false }
}

task runBenchmarksNative(type: Exec) {
    group = 'application'
    description = 'Runs the native image of the Benchmarks app'
    def outputDir = "${buildDir}/native-image"
    def nativeImageExecutable = "${outputDir}/benchmarks"
    commandLine nativeImageExecutable
    dependsOn buildBenchmarksNative
}

task buildNostrClientJar(type: Jar) {
    group = 'application'
    description = 'Builds an executable JAR for NostrClient'
    
    archiveBaseName = 'nostr-client'
    archiveClassifier = 'standalone'
    
    // Include the compiled classes from both main and test
    from sourceSets.main.output
    from sourceSets.test.output
    
    // Include all dependencies (creating a fat jar)
    dependsOn configurations.testRuntimeClasspath
    from {
        configurations.testRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    // Exclude any signature files from the dependencies
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    
    // Configure the manifest to make it executable
    manifest {
        attributes(
            'Main-Class': 'org.ngengine.nostr4j.client.NostrClient',
            'Implementation-Title': 'Nostr Client',
            'Implementation-Version': project.version
        )
    }
    
    // Make sure test classes are compiled first
    dependsOn test.dependsOn
    
  
    
    // Create a duplicatesStrategy to handle any duplicate files
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}