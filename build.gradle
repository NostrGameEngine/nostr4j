
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    
 }


plugins {
    id "org.gradle.toolchains.foojay-resolver-convention" version "0.9.0" apply false
    id "com.github.spotbugs"                            version "5.1.3" apply false
    id "com.diffplug.spotless"                          version "7.0.2" apply false
    id "io.github.gradle-nexus.publish-plugin"          version "2.0.0" 
    id "org.gradle.test-retry"                          version "1.5.2" apply false
}

ext {
    repo="NostrGameEngine/nostr4j"
    website="https://github.com/NostrGameEngine/nostr4j"
    baseVersion="0.2.0-SNAPSHOT"
    baseGroup="org.ngengine"
    description="High-performance Nostr client library with RTC support"
    author="Riccardo Balbo"
    authorAlias="rblb"
    authorEmail="os@rblb.it"
    license="BSD 3-Clause License"
    licenseUrl="https://opensource.org/licenses/BSD-3-Clause"

    ngePlatformVersionSnapshot = "0.2.0-SNAPSHOT"
    ngePlatformVersion = "0.2.0"

    lnurlVersionSnapshot = "0.0.0-SNAPSHOT"
    lnurlVersion = "0.0.3"

    bech32VersionSnapshot = "1.0.0-SNAPSHOT"
    bech32Version = "1.0.3"
}

if(System.getenv("SONATYPE_USERNAME") || project.findProperty("sonatypeUsername")){
    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
                snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))

                username = System.getenv("SONATYPE_USERNAME") ?: project.findProperty("sonatypeUsername") ?: ""
                password = System.getenv("SONATYPE_PASSWORD") ?: project.findProperty("sonatypePassword") ?: ""
            }
        }
    }
}



allprojects {

    def projectVersion = System.getenv("VERSION")
    if (projectVersion == null || projectVersion.trim().isEmpty()) {
        projectVersion = rootProject.ext.baseVersion
    }
    def projectGroup = System.getenv("GROUP") ?: rootProject.ext.baseGroup 
    
    println "Using project version: ${projectVersion}"
    println "Using project group: ${projectGroup}"

    version = projectVersion
    group   = projectGroup


    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = uri("https://central.sonatype.com/repository/maven-snapshots")
        }
    }
}

def applyConf(proj){
    
    def jts = proj.extensions.getByType(org.gradle.jvm.toolchain.JavaToolchainService)

    proj.java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
        withJavadocJar()
        withSourcesJar()
    }

    // Use the service for test compilation
    proj.tasks.named('compileTestJava') {
        javaCompiler = jts.compilerFor {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    // And for running tests
    proj.tasks.named('test') {
        javaLauncher = jts.launcherFor {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
    
    proj.apply plugin: "com.github.spotbugs"

    
    
    // common    
    proj.apply plugin: "com.diffplug.spotless"
    proj.apply plugin: "maven-publish"
    proj.apply plugin: "signing"  

    proj.tasks.withType(Javadoc).configureEach { Javadoc javadocTask ->
        javadocTask.options.encoding   = "UTF-8"
        javadocTask.destinationDir     = file("${proj.rootDir}/dist/javadoc/${proj.name}")
    }

    proj.afterEvaluate {
        proj.publishing {
            publications {
                mavenJava(MavenPublication) {
                    from(proj.components.java)
                    

                    groupId    = proj.group.toString()
                    artifactId = proj.name
                    version    = proj.version.toString()

                    pom {
                        name        = proj.name
                        description = rootProject.ext.description
                        url         = rootProject.ext.website
                        licenses {
                            license {
                                name = rootProject.ext.license
                                url  = rootProject.ext.licenseUrl
                            }
                        }
                        developers {
                            developer {
                                id = rootProject.ext.authorAlias
                                name = rootProject.ext.author
                                email = rootProject.ext.authorEmail
                            }
                        }
                        scm {
                            connection = "scm:git:git://github.com/${rootProject.ext.repo}.git"
                            developerConnection = "scm:git:ssh://github.com:${rootProject.ext.repo}.git"
                            url = "https://github.com/${rootProject.ext.repo}"
                        }
                    }
                }
            }
            repositories {
                mavenLocal()
                maven {
                    name = "distFolder"
                    url  = uri("file://${proj.rootDir}/dist")
                }
                if (System.getenv("GITHUB_REGISTRY") != null) {
                    maven {
                        name = "GitHubPackages"
                        url  = uri(
                            "https://maven.pkg.github.com/" + System.getenv("GITHUB_REGISTRY")
                        )
                        credentials {
                            username = System.getenv("GITHUB_USERNAME") ?: ""
                            password = System.getenv("GITHUB_TOKEN")   ?: ""
                        }
                    }
                }
            }

            if (System.getenv("GPG_PRIVATE_KEY") != null && System.getenv("GPG_PASSPHRASE") != null) {
                proj.signing {
                    def signingKey = System.getenv("GPG_PRIVATE_KEY")
                    def signingPassword = System.getenv("GPG_PASSPHRASE")
                    useInMemoryPgpKeys(signingKey, signingPassword)
                    sign proj.publishing.publications.mavenJava
                }
            }
        }

        proj.tasks.register("outputCoordinates") {      
            doLast {
                proj.publishing.publications.forEach { publication ->
                    if (publication instanceof MavenPublication) {
                        println ""
                        println "=========== Published Artifact Coordinates ==========="
                        println "Group ID:    ${publication.groupId}"
                        println "Artifact ID: ${publication.artifactId}"
                        println "Version:     ${publication.version}"
                        println "Maven:       ${publication.groupId}:${publication.artifactId}:${publication.version}"
                        println "Gradle:      implementation '${publication.groupId}:${publication.artifactId}:${publication.version}'"
                        println "===================================================="
                        println ""
                    }
                }
            }
        }

        proj.tasks.withType(PublishToMavenRepository).configureEach { publishTask ->
            publishTask.finalizedBy(proj.tasks.named("outputCoordinates"))
        }
        proj.tasks.withType(PublishToMavenLocal).configureEach { publishLocalTask ->
            publishLocalTask.finalizedBy(proj.tasks.named("outputCoordinates"))
        }

        proj.tasks.register("generateBuildDate") {
            def outputDir  = file("${proj.buildDir}/generated-resources/build-date/${proj.name}")
            def outputFile = file("${outputDir}/build.date")

            outputs.file(outputFile)

            doLast {
                outputDir.mkdirs()
                outputFile.text = java.time.LocalDate.now().toString()
            }
        }

        proj.tasks.named("processResources").configure { copySpec ->
            dependsOn(proj.tasks.named("generateBuildDate"))
            copySpec.duplicatesStrategy = DuplicatesStrategy.INCLUDE
            copySpec.from("${proj.buildDir}/generated-resources/build-date") {
                into("") 
            }
        }
    
    }

} 


subprojects { proj ->
  
    proj.plugins.withId('java-library') {
        proj.apply plugin: "org.gradle.test-retry"
        applyConf(proj);     
    }

    proj.plugins.withId("com.github.spotbugs") {
        proj.spotbugs {
            ignoreFailures = true
            reportLevel     = com.github.spotbugs.snom.Confidence.valueOf("MEDIUM")
            toolVersion     = "4.9.3"
            excludeFilter   = file("${proj.rootDir}/spotbugs-exclude.xml")
        }
        proj.spotbugsTest {
            enabled = false
        }
        proj.dependencies {
            spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0"
        }
        proj.tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach { task ->
            task.reports {
                html {
                    enabled     = true
                    destination = file("${proj.rootDir}/reports/spotbugs/${task.name}.html")
                }
                sarif {
                    enabled     = true
                    destination = file("${proj.rootDir}/reports/spotbugs/${task.name}.sarif")
                }
            }
        }
    }

    
    proj.tasks.register('addLicenseHeaders') {
        description = 'Adds license headers to Java files if missing'
        group = 'formatting'
        
        def srcFiles = proj.fileTree(dir: 'src', include: '**/java/**/*.java')
        
        def licenseText = file("${rootProject.rootDir}/LICENSE").text
        licenseText = licenseText.readLines().collect { " * " + it }.join("\n")
        licenseText = "/**\n" + licenseText + "\n */"

        doLast {
            def licenseHeader = licenseText
            def headerPattern = ~/(?s)\/\*\*.*?Copyright.*?\*\//
            
            srcFiles.each { file ->
                def content = file.text
                
                if (!(content =~ headerPattern)) {
                    logger.info("Adding license header to: ${file.path}")
                    
                    def packageMatcher = content =~ /(?m)^package\s+[\w.]+;/
                    
                    if (packageMatcher.find()) {
                        def position = packageMatcher.start()
                        def newContent = content.substring(0, position) + 
                                            licenseHeader + 
                                            "\n\n" + 
                                            content.substring(position)
                        file.text = newContent
                    } else {
                        file.text = licenseHeader + "\n\n" + content
                    }
                } else {
                    logger.debug("License header already exists in: ${file.path}")
                }
            }
        }
    }
  
    proj.plugins.withId("com.diffplug.spotless") {
        proj.spotless {
            java {
                importOrder()
                removeUnusedImports()
             
                formatAnnotations()
                prettier(["prettier": "2.8.8", "prettier-plugin-java": "2.2.0"])
                        .config([
                            "parser": "java", 
                            "tabWidth": 4, 
                            "printWidth": 128,
                            "endOfLine": "lf",
                            "useTabs": false
                        ])
                            
            }
            enforceCheck false

        }

        proj.tasks.named('spotlessApply').configure {
            dependsOn proj.tasks.named('addLicenseHeaders')
        }

        proj.tasks.withType(Test) {
            retry {
                maxRetries = 3
                failOnPassedAfterRetry = false                
                maxFailures = 10

               

            }
            
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                showExceptions true
                showCauses true
                showStackTraces true
                exceptionFormat "full"
            }
        }
    }
} 
