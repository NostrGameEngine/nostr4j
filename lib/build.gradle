/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
   id("com.diffplug.spotless") version "7.0.2"
}
spotless {
    java {
    importOrder()  
    removeUnusedImports()
    cleanthat()   
    prettier(['prettier': '2.8.8', 'prettier-plugin-java': '2.2.0']).config(['parser': 'java', 'tabWidth': 4])  
    formatAnnotations()  

    def licenseText = file("${rootDir}/LICENSE").text
    def wrapped = licenseText.readLines().collect { " * " + it }.join("\n")
    def header = "/**\n" + wrapped + "\n */"
    
    // Apply the header using licenseHeader()
    licenseHeader(header, "package ")
  }
}
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation libs.junit
    
    // Add JUnit 4 explicitly - if not already included in libs.junit
    testImplementation 'junit:junit:4.13.2'
    
    implementation 'com.google.code.gson:gson:2.12.1'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.80'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Configure test task to use JUnit 4
tasks.named('test') {
    useJUnit()
    
    // Optional: Configure test logging
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

task runBenchmarks(type: JavaExec) {    
    group = 'application'
    description = 'Runs the benchmarks app with production optimizations'
    mainClass = 'org.ngengine.nostr4j.Benchmarks'
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = [  '-XX:+UseG1GC']
    dependsOn build 
}

 task traceBenchmarks(type: JavaExec) {
    group = 'application'
    description = 'Runs the benchmarks app with the GraalVM native-image tracing agent'
    mainClass = 'org.ngengine.nostr4j.Benchmarks'
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = [
        '-XX:+UseG1GC',
        '-agentlib:native-image-agent=config-output-dir=' + projectDir + '/src/test/resources/META-INF/native-image/org/ngengine/nostr4j',
    ]
    dependsOn build
}

task buildBenchmarksNative(type: Exec) {
    group = 'build'
    description = 'Builds a native image of the Benchmarks app using GraalVM'
    def graalHome = System.getenv("GRAALVM_HOME")
    if (graalHome == null) {
        graalHome = System.getenv("JAVA_HOME")
        if (graalHome == null) {
            throw new GradleException("GRAALVM_HOME or JAVA_HOME environment variable must be set")
        }
    }

    def nativeImageExecutable = "${graalHome}/bin/native-image"
    def outputDir = "${buildDir}/native-image"
    def mainClass = 'org.ngengine.nostr4j.Benchmarks'

    def combinedClasspath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath

    commandLine nativeImageExecutable,
        '-cp', combinedClasspath.asPath,
        '-H:Name=benchmarks', 
        '-H:Path=' + outputDir, 
        "-H:ReflectionConfigurationFiles=${projectDir}/reflect-config.json", 
        '-H:+UnlockExperimentalVMOptions',
        '--enable-native-access=ALL-UNNAMED',
        '--link-at-build-time',     
        mainClass
    dependsOn build
    outputs.upToDateWhen { false }
}

task runBenchmarksNative(type: Exec) {
    group = 'application'
    description = 'Runs the native image of the Benchmarks app'
    def outputDir = "${buildDir}/native-image"
    def nativeImageExecutable = "${outputDir}/benchmarks"
    commandLine nativeImageExecutable
    dependsOn buildBenchmarksNative
}