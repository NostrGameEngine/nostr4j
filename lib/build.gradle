/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'java-library'
    id("com.diffplug.spotless") version "7.0.2"
    id("com.github.spotbugs") version "6.1.7"
    id "io.github.0ffz.github-packages" version "1.2.1" 
}
spotless {
    java {
    importOrder()  
    removeUnusedImports()
    cleanthat()   
    prettier(['prettier': '2.8.8', 'prettier-plugin-java': '2.2.0']).config(['parser': 'java', 'tabWidth': 4,'printWidth': 128])
    formatAnnotations()  

    def licenseText = file("${rootDir}/LICENSE").text
    def wrapped = licenseText.readLines().collect { " * " + it }.join("\n")
    def header = "/**\n" + wrapped + "\n */"
    
    licenseHeader(header, "package ")
  }
}

repositories {
    mavenCentral()
maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    testImplementation libs.junit

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'    
    implementation 'com.google.code.gson:gson:2.12.1'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.80'
    implementation 'tel.schich:libdatachannel-java:0.22.3.1-SNAPSHOT'   

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

spotbugs {
    ignoreFailures = true
    reportLevel = com.github.spotbugs.snom.Confidence.valueOf("MEDIUM")
    toolVersion = '4.9.3'
    excludeFilter = file("${rootDir}/spotbugs-exclude.xml")
}

spotbugsTest {
    enabled = false
}

// Configure test task to use JUnit 4
tasks.named('test') {
    useJUnit()
    
    // Optional: Configure test logging
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

task runBenchmarks(type: JavaExec) {    
    group = 'application'
    description = 'Runs the benchmarks app with production optimizations'
    mainClass = 'org.ngengine.nostr4j.Benchmarks'
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = [  '-XX:+UseG1GC']
    dependsOn build 
}

 task traceBenchmarks(type: JavaExec) {
    group = 'application'
    description = 'Runs the benchmarks app with the GraalVM native-image tracing agent'
    mainClass = 'org.ngengine.nostr4j.Benchmarks'
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = [
        '-XX:+UseG1GC',
        '-agentlib:native-image-agent=config-output-dir=' + projectDir + '/src/test/resources/META-INF/native-image/org/ngengine/nostr4j',
    ]
    dependsOn build
}

task buildBenchmarksNative(type: Exec) {
    group = 'build'
    description = 'Builds a native image of the Benchmarks app using GraalVM'
    def graalHome = System.getenv("GRAALVM_HOME")
    if (graalHome == null) {
        graalHome = System.getenv("JAVA_HOME")
        if (graalHome == null) {
            throw new GradleException("GRAALVM_HOME or JAVA_HOME environment variable must be set")
        }
    }

    def nativeImageExecutable = "${graalHome}/bin/native-image"
    def outputDir = "${buildDir}/native-image"
    def mainClass = 'org.ngengine.nostr4j.Benchmarks'

    def combinedClasspath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath

    commandLine nativeImageExecutable,
        '-cp', combinedClasspath.asPath,
        '-H:Name=benchmarks', 
        '-H:Path=' + outputDir, 
        "-H:ReflectionConfigurationFiles=${projectDir}/reflect-config.json", 
        '-H:+UnlockExperimentalVMOptions',
        '--enable-native-access=ALL-UNNAMED',
        '--link-at-build-time',     
        mainClass
    dependsOn build
    outputs.upToDateWhen { false }
}

task runBenchmarksNative(type: Exec) {
    group = 'application'
    description = 'Runs the native image of the Benchmarks app'
    def outputDir = "${buildDir}/native-image"
    def nativeImageExecutable = "${outputDir}/benchmarks"
    commandLine nativeImageExecutable
    dependsOn buildBenchmarksNative
}

task buildNostrClientJar(type: Jar) {
    group = 'application'
    description = 'Builds an executable JAR for NostrClient'
    
    archiveBaseName = 'nostr-client'
    archiveClassifier = 'standalone'
    
    // Include the compiled classes from both main and test
    from sourceSets.main.output
    from sourceSets.test.output
    
    // Include all dependencies (creating a fat jar)
    dependsOn configurations.testRuntimeClasspath
    from {
        configurations.testRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    // Exclude any signature files from the dependencies
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    
    // Configure the manifest to make it executable
    manifest {
        attributes(
            'Main-Class': 'org.ngengine.nostr4j.client.NostrClient',
            'Implementation-Title': 'Nostr Client',
            'Implementation-Version': project.version
        )
    }
    
    // Make sure test classes are compiled first
    dependsOn test.dependsOn
    
  
    
    // Create a duplicatesStrategy to handle any duplicate files
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}